import { createServerClient } from "@supabase/ssr";
import { NextRequest, NextResponse } from "next/server";

export async function middleware(req: NextRequest) {
	const res = NextResponse.next();

	const supabase = createServerClient(
		process.env.NEXT_PUBLIC_SUPABASE_URL!,
		process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!,
		{
			cookies: {
				get: (name) => req.cookies.get(name)?.value,
				set: (name, value, options) => {
					res.cookies.set({ name, value, ...options });
				},
				remove: (name, options) => {
					res.cookies.delete({ name, ...options });
				},
			},
		}
	);

	// Check if the user is authenticated
	const {
		data: { session },
	} = await supabase.auth.getSession();

	console.log("Middleware - Path:", req.nextUrl.pathname);
	console.log("Middleware - Session:", session?.user?.email || "No session");

	// If user is not authenticated and trying to access protected routes
	if (
		!session &&
		(req.nextUrl.pathname.startsWith("/admin") ||
			req.nextUrl.pathname.startsWith("/profile"))
	) {
		console.log("Middleware - Redirecting to signin, no session");
		const redirectUrl = new URL("/auth/signin", req.url);
		redirectUrl.searchParams.set("redirect", req.nextUrl.pathname);
		return NextResponse.redirect(redirectUrl);
	}

	// If the user is authenticated and trying to access admin routes
	if (session && req.nextUrl.pathname.startsWith("/admin")) {
		// Fetch user data to check role
		const { data: userData } = await supabase
			.from("users")
			.select("role")
			.eq("id", session.user.id)
			.single();

		console.log(
			"Middleware - User role check:",
			userData?.role || "No role data"
		);

		// If not admin, redirect to home
		if (userData?.role !== "admin") {
			console.log("Middleware - Redirecting to home, not admin");
			return NextResponse.redirect(new URL("/", req.url));
		}
	}

	return res;
}

// Specify which routes this middleware should run on
export const config = {
	matcher: ["/admin/:path*", "/profile/:path*"],
};
