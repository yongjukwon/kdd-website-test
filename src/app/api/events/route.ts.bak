import {
	createEvent,
	deleteEvent,
	getAllEvents,
	getEventById,
	updateEvent,
} from "@/entities/events";
import { getSupabaseRouteHandler } from "@/shared/supabase-route";
import { NextRequest, NextResponse } from "next/server";

// GET /api/events - Fetch all events
export async function GET(request: NextRequest) {
	try {
		const events = await getAllEvents();
		return NextResponse.json(events);
	} catch (error) {
		console.error("Error fetching events:", error);
		return NextResponse.json(
			{ error: "Failed to fetch events" },
			{ status: 500 }
		);
	}
}

// POST /api/events - Create a new event
export async function POST(request: NextRequest) {
	try {
		const supabase = await getSupabaseRouteHandler();
		const {
			data: { session },
		} = await supabase.auth.getSession();

		if (!session) {
			return NextResponse.json({ error: "Unauthorized" }, { status: 401 });
		}

		const eventData = await request.json();

		// Add the current user as the organizer
		eventData.organizer_user_id = session.user.id;

		const newEvent = await createEvent(eventData);
		return NextResponse.json(newEvent, { status: 201 });
	} catch (error) {
		console.error("Error creating event:", error);
		return NextResponse.json(
			{ error: "Failed to create event" },
			{ status: 500 }
		);
	}
}
